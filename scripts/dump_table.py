# Creates functions in a table of pointers to functions and then produces a C header file. 
#@author LemonHaze
#@category Data

indexes = ""
functions = ""
processedFuncs = []
label = 'ShenmueScriptFunctions'
array = currentProgram.symbolTable.getLabelOrFunctionSymbols(label, None)[0].object
for i in xrange(array.numComponents):
  el = array.getComponent(i)
  if isinstance(el.dataType, ghidra.program.database.data.PointerDB):
	dt = str(el.dataType)
      	value = el.value

	# Find or create a function at the offset in the array
	if not getFunctionAt(value):
		print(('Creating function at %x' % value))
		createFunction(value, None)
	f = getFunctionAt(value)

	# only process uniques
	already_processed = 0
	for s in processedFuncs:
		if s == f.getName():
			already_processed = 1
			print('Skipping %s' % f.getName())

	if already_processed == 0:
		processedFuncs.append(f.getName())

		# Setup our index for the function
		indexes += '#define IDX_%s \t\t\t\t\t\t%d\n' % (f.getName(), i)

		# Collect parameter names
		index = 0
		cnt = f.getParameterCount()
		paramNames=""
		paramTypes=""
		funcSigParams=""
		for p in f.getParameters():
			paramNames += ('%s' % p.getName())
			paramTypes += ('%s' % p.getDataType())
			funcSigParams += ('%s %s' % (p.getDataType(), p.getName()) )
			if (index + 1 != cnt):
				paramNames += ", "
				paramTypes += ", "
				funcSigParams += ", "
			index = index + 1

		# Generate the function 
		if f.getReturnType().getName() == "undefined":
			returnType = "void"
		else:
			returnType = f.getReturnType().getName()
		functions += ('__FORCEINLINE %s %s (%s) {\n' % (returnType, f.getName(), funcSigParams))
		if f.getReturnType().getName() == "undefined":
			functions += ('		((void (*)(%s))(void*)TBL_ADDR(IDX_%s)) (%s);\n' % (paramTypes, f.getName(), paramNames) )
		else:
			functions += ('		return ((%s (*)(%s))(void*)TBL_ADDR(IDX_%s)) (%s);\n' % (f.getReturnType().getName(), paramTypes, f.getName(), paramNames) )		
		functions += ('}\n\n')
  else:
      dt = el.dataType.CDeclaration
      value = el.value.value

# Generate a C header file with the indexes and functions.
file = open("event_tbl.h", "w")

file.write("/* Generated by dump_table.py - LemonHaze 2022 */\n\n")
file.write("#ifndef __EVENT_TBL_H\n")
file.write("#define __EVENT_TBL_H\n")
file.write("#include \"types.h\"\n")
file.write("#define g_task_context_OFFS     0x0c020200-0xC")
file.write("#define EV_SCRIPT_FUNC_TBL_OFFS 0x0c020200")
file.write("#define TBL_ADDR(f)             *(int*)((EV_SCRIPT_FUNC_TBL_OFFS+(f*4)))")
file.write("\n/*===============================================\n")
file.write("====================INDEXES======================\n")
file.write("=================================================*/\n\n")
file.write(indexes)
file.write("\n/*===============================================\n")
file.write("===================FUNCTIONS=====================\n")
file.write("=================================================*/\n\n")
file.write(functions)
file.write("#endif")

file.close()

